<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/app/base.css' rel='stylesheet' />
  <link href='/app/style.css' rel='stylesheet' />
  <script src='/ext/underscore-min.js'></script>
  <script src='/ext/codemirror.js'></script>
  <script src='/ext/codemirror.runmode.js'></script>
  <script src='/ext/jquery-2.0.3.min.js'></script>
  <script src='/ext/jquery.sortable.js'></script>
  <script src='/ext/backbone.js'></script>
  <script src='/ext/mapbox.js'></script>
  <script src='/ext/leaflet-hash.js'></script>
  <script src='/app/lib.js'></script>
  <script src='/app/codemirror.carto.js'></script>
  <script src='/app/codemirror.carto.complete.js'></script>
  <title><%= style.name %></title>
</head>

<body id='view'>

<div id='perf'></div>

<div id='data' class='pane w3 l1'>
  <nav>
    <a class='button icon close' href='#layers'></a>
  </nav>
  <section>
    <h2>Sources</h2>
  </section>
  <div class='grid'><!--
  <%
    print(_(history.source).chain()
      .sortBy(function(item) {
        return item.name.toLowerCase();
      })
      .map(function(item) {
        return this.sourceitem(_({active:item.id === style.source}).defaults(item));
      }.bind(this))
      .value().join(''));
  %>
  --></div>
</div>

<form id='settings' class='pane w4 l0'>
<div class='column w2 l0 lighten'>
  <%= this.history(obj) %>
</div>
<div class='column w2 l2'>
  <nav>
    <a class='button icon close' href='#'></a>
  </nav>
  <section>
    <h2>Settings</h2>
  </section>
  <section>
    <label class='inline'>Name</label>
    <input class='stretch' name='name' type='text' value='<%= _(style.name).escape() %>'/>
  </section>
  <section>
    <label class='inline'>Description</label>
    <textarea class='stretch' name='description' type='text' cols='60' rows='8'><%= style.description %></textarea>
  </section>
  <section>
    <label class='inline'>Attribution</label>
    <input class='stretch' name='attribution' type='text' value='<%= _(style.attribution).escape() %>'></textarea>
  </section>
  <section>
    <label class='inline'>Image format</label>
    <select name='format'>
      <% _({
        'png24': 'png (24-bit)',
        'png8:m=h': 'png (256 colors)',
        'png8:m=h:c=192': 'png (192 colors)',
        'png8:m=h:c=128': 'png (128 colors)',
        'png8:m=h:c=64': 'png (64 colors)',
        'png8:m=h:c=32': 'png (32 colors)',
        'jpeg95': 'jpeg (95%)',
        'jpeg90': 'jpeg (90%)',
        'jpeg85': 'jpeg (85%)',
        'jpeg80': 'jpeg (80%)'
      }).each(function(label, format) { %>
      <option value='<%= format %>' <% if (style.format === format) { %> selected='selected' <% } %>><%= label %></option>
      <% }); %>
    </select>
  </section>
  <section>
    <label class='inline'>Minzoom</label>
    <input id='minzoom' name='minzoom' class='min' type='range' value='<%= style.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
    <label class='range' id='minzoom-val'><%= style.minzoom %></label>
  </section>
  <section>
    <label class='inline'>Maxzoom</label>
    <input id='maxzoom' name='maxzoom' class='max' type='range' value='<%= style.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
    <label class='range' id='maxzoom-val'><%= style.maxzoom %></label>
  </section>
  <section>
    <label class='inline'>Scale</label>
    <input id='scale' name='scale' type='range' value='<%= style.scale %>' min='1' max='4' step='1' onchange='rangeHandler(this, "scale", "#scale");' />
    <label class='range' id='scale-val'><%= style.scale %></label>
  </section>
  <section class='righted'>
    <a href='#' class='button wide submit icon okay save'>Save</a>
    <a href='/style.tm2z?id=<%=style.id%>' class='button wide submit icon package'>Package</a>
  </section>
</div>
</form>

<div id='layers' class='menu column w1 dark hide'>
  <nav class='menu-title centered'>
    <a href='#' class='button icon close left'></a>
    <a href='#data' class='button title data-n icon plus'>Data</a>
    <a href='#layers' class='button title data-y icon close'>Data</a>
  </nav>
  <div class='menu-content'>
  <%= _(sources).map(this.sourcelayers).join('\n') %>
  </div>
</div>

<div id='full' class='column w2 l0'>
  <div id='title'>
    <div class='left'>
      <span class='joined'>
      <a class='button icon layers' href='#layers'></a><!--
      <% if (style._tmp) { %>
        --><a class='button icon okay' href='#saveas'>Save as</a>
      <% } else { %>
        --><a class='button icon okay save' href='#'>Save</a>
      <% } %>
      </span>
    </div>
    <div class='right'>
      <a class='button full-n icon full' href='#full'></a>
      <a class='button full-y icon close' href='#'></a>
    </div>
    <h3><a href='#settings'>
      <span class='name'><%= style.name || 'Untitled' %></span>
      <span class='icon gear' href='#settings'></span>
    </a></h3>
  </div>
  <div id='map' style='background-color:<%=style.background%>;'></div>
  <div id='map-overlay' class='overlay'></div>
  <div id='map-errors'></div>
  <div id='zoomedto' class='z<%=style.center[2]%>'></div>
</div>

<div id='docs' class='pane w2'>
  <%= this['styledocs'](cartoRef) %>
</div>

<div id='fonts' class='pane w2'>
  <nav><a class='button icon close' href='#docs'></a></nav>
  <section>
    <h2>Fonts</h2>
  </section>
  <div class='grid'><!--
  <% fontsRef.forEach(function(font) { %>
  --><div class='cell'><a class='font' style='background-image:url("/font.png?id=<%=font%>")'></a></div><!--
  <% }); %>
  --></div>
</div>

<div id='code' class='column w2 l2'>
  <div class='left'>
    <a class='button docs-n icon code' href='#docs'></a>
    <a class='button docs-y icon close' href='#'></a>
  </div>
  <nav id='tabs'><!--
    --><a rel='template' href='#code-template' class='tab mini'><span class='icon tooltip'></span></a><!--
    <% _(style.styles).keys().forEach(function(k,i) { %>
    --><a rel='<%=k%>' href='#code-<%=k.replace(/[^\w+]/g,'_')%>' class='tab <%=!i?'active':''%>'><%=k%> <span class='icon close delete'></span></a><!--
    <% }); %>
  --></nav>
  <div class='right'>
    <a class='button icon plus' href='#addtab'></a>
  </div>
  <form id='interactivity'>
    <label>Layer</label>
    <select name='interactivity_layer'>
      <option value=''>&lt; choose layer &gt;</option>
      <% _(sources).each(function(source) { %>
      <% _(source.vector_layers||{}).each(function(l) { %>
      <option value='<%=l.id%>' <% if (style.interactivity_layer === l.id) { %>selected='selected'<% } %>><%=l.id%></option>
      <% }); %>
      <% }); %>
    </select>
  </form>
</div>

<%= this.modalmessage() %>
<%= this.modalmapbox() %>
<%= this.modalbrowseropen({cwd:cwd, type:'style'}) %>
<%= this.modalbrowseropen({cwd:cwd, type:'source'}) %>
<%= style._tmp ? this.modalbrowsersave({cwd:cwd, type:'style'}) : '' %>

<form id='addtab' class='modal centered'>
  <a class='button submit icon close' href='#'></a>
  <span class='joined'>
    <input type='text' placeholder='filename.mss' size='20' id='addtab-filename' pattern='\w+\.mss'/><!--
    --><input type='submit' value='New tab'/>
  </span>
</form>

<div id='mask'></div>

<script>
var map = baselayer = tiles = grids = gridc = null;

var templates = {};
templates.sourceitem = <%= this.sourceitem.source %>;
templates.sourcelayers = <%= this.sourcelayers.source %>;

statHandler('drawtime')();

var Tab = function(id, value) {
  var tab = CodeMirror(document.getElementById('code'), {
    value: value,
    lineNumbers: true,
    mode: {
      name: 'carto',
      reference: window.cartoRef
    }
  });
  var completer = cartoCompletion(tab, window.cartoRef);

  /*
  @TODO
  function updateSelectors(model) {
      var ids = _.map(model.get('Layer').pluck('id'),
          function(x) { return '#' + x; });
      var classes = _(model.get('Layer').pluck('class')).chain().map(
          function(c) {
              if (c == undefined) return '';
              var cs = c.split(' ');
              if (cs[0] == '') return '';
              return _.map(cs, function(x) { return '.' + x; });
          }).flatten().compact().value();
      cartoCompleter.ids(ids);
      cartoCompleter.classes(classes);
  }
  this.model.bind('change', updateSelectors);
  updateSelectors(this.model);
  */

  tab.setOption('onKeyEvent', completer.onKeyEvent);
  tab.setOption('onHighlightComplete', _(completer.setTitles).throttle(100));
  tab.getWrapperElement().id = 'code-' + id.replace(/[^\w+]/g,'_');
  return tab;
};
var code = _(<%=JSON.stringify(style.styles)%>).reduce(function(memo, value, k) {
  memo[k] = Tab(k, value);
  return memo;
}, {});

// Add in interactivity template.
code['template'] = Tab('template', <%=JSON.stringify(style.template)%>);

_(code).toArray().shift().getWrapperElement().className += ' active';

var Style = Backbone.Model.extend({});
Style.prototype.url = function() { return '/style.json?id=' + this.get('id'); };

var Source = Backbone.Model.extend({});
Source.prototype.url = function() { return '/source.json?id=' + this.get('id'); };

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click a.button.save': 'save',
  'click a.button.recache': 'recache',
  'submit #settings': 'save',
  'submit #addtab': 'addtab',
  'submit #addmapbox': 'addmapbox',
  'click #tabs a.tab span.delete': 'deltab',
  'click #tabs a.tab': 'tabbed',
  'click #docs nav a': 'tabbed',
  'click #menu nav a': 'tabbed',
  'click #settings a.tab': 'tabbed',
  'click #layers a': 'tabbed',
  'click #data a.cell': 'adddata',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }
  if ((!ev.ctrlKey && !ev.metaKey) || ev.altKey || ev.shiftKey) return;
  switch (ev.which) {
  case 83: // s
    this.save();
    break;
  case 187: // +
    map.zoomBy(1);
    break;
  case 189: // -
    map.zoomBy(-1);
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.tabbed = tabbedHandler;
Editor.prototype.addmapbox = addMapBox;
Editor.prototype.adddata = function(ev) {
  var target = $(ev.currentTarget);
  if (target.is('.active')) return false;
  var id = target.attr('href').split('#source-').pop();
  (new Source({id:id})).fetch({
    success: _(function(model, resp) {
      $('#data a.active').removeClass('active');
      $('#layers .menu-content').html(templates.sourcelayers(resp));
      target.addClass('active');
    }).bind(this),
    error: _(this.error).bind(this)
  });
  return false;
};
Editor.prototype.addtab = function(ev) {
  var filename = $('#addtab-filename').val();
  if (!code[filename]) {
    $("<a rel='"+filename+"' href='#code-"+filename.replace(/[^\w+]/g,'_')+"' class='tab'>"+filename+" <span class='icon close delete'></span></a>").appendTo('nav#tabs');
    code[filename] = Tab(filename, '');
  }
  window.location.hash = '#';
  return false;
};
Editor.prototype.deltab = function(ev) {
  var styles = this.model.get('styles');
  var parent = $(ev.currentTarget).parent();
  var target = parent.attr('rel');
  if (!styles[target]) return false;
  if (confirm('Remove stylesheet "' + target + '"?')) {
    $(code[target].getWrapperElement()).remove();
    parent.remove();
    delete styles[target];
    delete code[target];
    this.model.set({styles:styles});
    // Set first tab to active.
    if (parent.is('.active') && $('a.tab').size())
      this.tab({ currentTarget:$('a.tab').get(0) });
  }
  return false;
};
Editor.prototype.recache = function(ev) {
  this.model.set({_recache:true});
  this.save(ev);
  return false;
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  var attr = {};
  // Grab settings form values.
  _($('#settings').serializeArray()).reduce(function(memo, field) {
    if (field.name === 'minzoom' || field.name === 'maxzoom' || field.name === 'scale') {
      memo[field.name] = parseInt(field.value,10);
    } else if (field.name && field.value) {
      memo[field.name] = field.value;
    }
    return memo;
  }, attr);
  // Grab interactivity form values.
  _($('#interactivity').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, attr);
  // Grab styles, sources.
  attr.styles = _(code).reduce(function(memo, cm, k) {
    if (k !== 'template') memo[k] = cm.getValue();
    return memo;
  }, {});
  attr.source = $('#layers div.source').map(function() {
    return $(this).attr('id').split('source-').pop();
  }).get().shift();
  attr.template = code.template ? code.template.getValue() : '';

  if (this.model.get('_prefs').saveCenter) {
    var lon = map.getCenter().lng % 360;
    lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
    attr.center = [lon , map.getCenter().lat, map.getZoom() ];
  }

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  return ev && !!$(ev.currentTarget).is('a');
};
Editor.prototype.error = function(model, resp) {
  this.messageClear();

  if (!resp.responseText)
    return this.messageModal('Could not save style "' + model.id + '"');

    // Assume carto.js specific error array format response.
  _(JSON.parse(resp.responseText).message.toString().split('\n')).chain()
    .compact()
    .map(function(e) { return e.match(/^(Error: )?([\w.]+):([\d]+):([\d]+) (.*)$/) || e; })
    .each(_(function(e) {
      if (_(e).isArray()) {
        var id = e[2];
        var ln = parseInt(e[3]) - 1;
        code[id]._cartoErrors = code[id]._cartoErrors || [];
        code[id]._cartoErrors.push(ln);
        code[id].setMarker(ln, "<a id='error-"+ln+"' href='#error-"+ln+"'>%N%</a><span class='message'><a href='#' class='icon'>✕</a>"+e[5]+"</span>", 'error');
      } else {
        return this.messageModal(e);
      }
    }).bind(this));
};
Editor.prototype.messageModal = function(text) {
  $('#message .message').text(text);
  window.location.hash = '#message';
};
Editor.prototype.messageClear = function() {
  $('#message .message').text('');
  $('#full').removeClass('loading');
  _(code).each(function(cm) {
    _(cm._cartoErrors||[]).each(cm.clearMarker);
    delete cm._cartoErrors;
  });
};
Editor.prototype.refresh = function(ev) {
  this.messageClear();

  if (!map) {
    console.log(this.model.get('center'));
    if (!location.hash) {
      // provide a default location in the hash, not the L.map (since that will
      // load before L.Hash takes control)
      var center = this.model.get('center');
      location.hash = '#' + center[2] + '/' + center[1] + '/' + center[0];
    }

    map = L.mapbox.map('map');
    new L.Hash(map);
    map.on('zoomend', function() { $('#zoomedto').attr('class', 'z' + (map.getZoom()|0)); });
  }
  map.options.minZoom = this.model.get('minzoom');
  map.options.maxZoom = this.model.get('maxzoom');

  // Refresh map baselayer.
  if (this.model.get('_prefs').baselayer) {
    baselayer = baselayer || L.mapbox.tileLayer(this.model.get('_prefs').baselayer).addTo(map);
  } else if (baselayer) {
    map.removeLayer(baselayer);
  }

  // Refresh map layer.
  if (tiles) map.removeLayer(tiles);
  tiles = L.mapbox.tileLayer({
    tiles: ['/style/{z}/{x}/{y}.png?id=<%=style.id%>&mtime=' + this.model.get('mtime') ],
    minzoom: this.model.get('minzoom'),
    maxzoom: this.model.get('maxzoom')
  })
  .on('tileload', statHandler('drawtime'))
  .on('load', errorHandler)
  .addTo(map);

  // Refresh gridcontrol template.
  if (grids) map.removeLayer(grids);
  if (gridc) map.removeControl(gridc);
  if (this.model.get('template') && this.model.get('interactivity_layer')) {
    grids = L.mapbox.gridLayer({
      grids: ['/style/{z}/{x}/{y}.grid.json?id=<%=style.id%>&mtime=' + this.model.get('mtime') ],
      minzoom: this.model.get('minzoom'),
      maxzoom: 22
    });
    gridc = L.mapbox.gridControl(grids, {
      follow: true,
      template: this.model.get('template')
    });
    map.addLayer(grids);
    map.addControl(gridc);
  }

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('#title .name').text(this.model.get('name') || 'Untitled');

  // Set canvas background color.
  if (this.model.get('background'))
    $('#map').css({'background-color':this.model.get('background')});

  return false;
};
var editor = new Editor({
  el: document.body,
  model: new Style(<%= JSON.stringify(style) %>)
});
editor.refresh();

// Syntax highlighting for carto ref.
$('pre.carto-snippet').each(function(i, elem) {
  var text = $(elem).text();
  $(elem).empty();
  CodeMirror.runMode(text, {name:'carto',reference:window.cartoRef}, $(elem).get(0));
});
</script>
</body>

</html>
